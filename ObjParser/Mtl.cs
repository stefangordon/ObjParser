using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Globalization;
using System.Text;
using ObjParser.Types;

namespace ObjParser
{
    public class MaterialLibrary
    {
        private readonly List<Material> _materials;

        public IReadOnlyList<Material> Materials { get { return _materials; } }

        /// <summary>
        /// Constructor. Initializes the material list.
        /// </summary>
        public MaterialLibrary()
        {
            _materials = new List<Material>();
        }

        /// <summary>
        /// Load .mtl from a file path.
        /// </summary>
        /// <param name="path">The path to the .mtl file.</param>
        public void LoadMtl(string path)
        {
            LoadMtl(File.ReadAllLines(path));
        }

        /// <summary>
        /// Load .mtl from a stream.
        /// </summary>
        /// <param name="data">The input stream containing .mtl content.</param>
        public void LoadMtl(Stream data)
        {
            using (var reader = new StreamReader(data))
            {
                LoadMtl(reader.ReadToEnd().Split(Environment.NewLine.ToCharArray()));
            }
        }

        /// <summary>
        /// Load .mtl from a list of strings.
        /// </summary>
        /// <param name="data">The lines of the .mtl file.</param>
        public void LoadMtl(IEnumerable<string> data)
        {
            foreach (var line in data)
            {
                ProcessLine(line);
            }
        }

        public void WriteMtlFile(string path, string[] headerStrings)
        {
            using (var outStream = File.Create(path))
            using (var writer = new StreamWriter(outStream, new UTF8Encoding(false)))
            {
                // Write some header data
                WriteHeader(writer, headerStrings);

                for (int i = 0; i < _materials.Count; i++) 
                    writer.WriteLine(_materials[i].ToString());
            }
        }

        private void WriteHeader(StreamWriter writer, string[] headerStrings)
        {
            if (headerStrings == null || headerStrings.Length == 0)
            {
                writer.WriteLine("# Generated by ObjParser");
                return;
            }

            foreach (var line in headerStrings)
            {
                writer.WriteLine("# " + line);
            }
        }

        private Material GetCurrentMaterial()
        {
            if (_materials.Count > 0) return _materials.Last();
            return new Material();
        }

        /// <summary>
        /// Parses and loads a line from an OBJ file.
        /// Currently only supports V, VT, F and MTLLIB prefixes
        /// </summary>
        private void ProcessLine(string line)
        {
            if (string.IsNullOrWhiteSpace(line)) return;
            int hashIndex = line.IndexOf('#');
            if (hashIndex >= 0) line = line.Substring(0, hashIndex);
            line = line.Trim();
            if (line.Length == 0) return;

            string[] parts = line.Split(new char[] { ' ', '\t' }, StringSplitOptions.RemoveEmptyEntries);

            if (parts.Length > 0)
            {
                Material CurrentMaterial = GetCurrentMaterial();
                Color c = new Color();
                switch (parts[0])
                {
                    case "newmtl":
                        CurrentMaterial = new Material();
                        if (parts.Length >= 2) CurrentMaterial.Name = parts[1];
                        _materials.Add(CurrentMaterial);
                        break;
                    case "Ka":
                        c.LoadFromStringArray(parts);
                        CurrentMaterial.AmbientReflectivity = c;
                        break;
                    case "Kd":
                        c.LoadFromStringArray(parts);
                        CurrentMaterial.DiffuseReflectivity = c;
                        break;
                    case "Ks":
                        c.LoadFromStringArray(parts);
                        CurrentMaterial.SpecularReflectivity = c;
                        break;
                    case "Ke":
                        c.LoadFromStringArray(parts);
                        CurrentMaterial.EmissiveCoefficient = c;
                        break;
                    case "Tf":
                        c.LoadFromStringArray(parts);
                        CurrentMaterial.TransmissionFilter = c;
                        break;
                    case "Ni":
                        if (parts.Length >= 2) CurrentMaterial.OpticalDensity = float.Parse(parts[1], CultureInfo.InvariantCulture);
                        break;
                    case "d":
                        if (parts.Length >= 2) CurrentMaterial.Dissolve = float.Parse(parts[1], CultureInfo.InvariantCulture);
                        break;
                    case "illum":
                        if (parts.Length >= 2) CurrentMaterial.IlluminationModel = int.Parse(parts[1], CultureInfo.InvariantCulture);
                        break;
                    case "Ns":
                        if (parts.Length >= 2) CurrentMaterial.SpecularExponent = float.Parse(parts[1], CultureInfo.InvariantCulture);
                        break;
                }
            }
        }

    }
}
